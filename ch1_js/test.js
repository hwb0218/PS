var a = 10; // @5002 어떠한 메모리 영역에 저장된 값 근데 주소가 아닌 값 자체를 복사하니까;
var b =  a; // @5002 10이 담겨!
// 원시값은 메모리 주소가 아닌 할당된 값 자체를 복사하므로
// a에 할당된 값을 변경하지 않는다.
// 주소값을 복사하잖아요.. 
var obj1 = {c: 10, d: 'ddd'}; // {c: 10, d: 'ddd'} 값아 아닌 메모리 주소를 복사하는거 
var obj2 = obj1; // 얘는 저 객체 값이 아니라 주소야! @5002 , @5003

// obj2는 객체의 주소값을 복사하여 동일한 메모리 공간을 바라보게 되므로
// obj1과 obj2는 동일한 값을 참조한다.

b = 15; // 원시형값의 경우 할당문을 사용하면 새로운 메모리 영역에 값을 저장하므로
// @5003
obj2.c = 20;

console.log(a, b);
console.log(obj1, obj2);


var obj1 = {c: 10, d: 'ddd'}
var obj2 = obj1;
obj2.c = 20; 


// ojb1 식별자의 메모리 주소 @1002 여기에 담긴 데이터는
// 이름: obj1, 값: @5002
// 객체 리터럴의 경우 프로퍼티(변수)의 집합을 담는 자료구조 {a:1, b: 2, c: 'aaa'}
// 주소 @5002 담긴 데이터가
// @7103~@7105 (총 3개)
// 주소 @7103의 데이터 이름: a, 데이터: 1
// 주소 @7104의 데이터 이름: b, 데이터: 2
